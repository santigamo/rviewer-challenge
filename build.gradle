plugins {
	id 'org.springframework.boot' version '2.7.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
	id 'org.flywaydb.flyway' version '9.1.6'
}

group = 'com.rviewer.skeletons'
version = '1.0.0'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation "org.springframework.boot:spring-boot-starter-actuator"
	implementation "org.springframework.boot:spring-boot-starter-data-jpa"
	implementation 'org.flywaydb:flyway-core:8.5.7'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	annotationProcessor 'org.projectlombok:lombok'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'

	testImplementation 'com.h2database:h2:2.1.212'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	testLogging {
		events "PASSED", "SKIPPED", "FAILED"
	}
	ignoreFailures = true
	finalizedBy jacocoTestReport
}

jacoco {
	toolVersion = "0.8.8"
	reportsDirectory = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = 	true
		html.required = true
		csv.required = 	false
	}
}

flyway {
	var host = System.getenv("POSTGRE_URL") ?: "localhost"
	var port = "5432"

	url = "jdbc:postgresql://$host:$port/postgres_rv_database"
	user = System.getenv("POSTGRE_USERNAME") ?: "rv_user"
	password = System.getenv("POSTGRE_PASSWORD") ?: "rv_password"
}

/*
************************************************************************************
************************ Task to obtain a clear test report ************************
************************************************************************************
*/
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent
tasks.withType(Test) {
	testLogging {
		events TestLogEvent.FAILED,
				TestLogEvent.PASSED

		exceptionFormat TestExceptionFormat.FULL
		showExceptions true
		showCauses true
		showStackTraces true

		debug {
			events 	TestLogEvent.FAILED,
					TestLogEvent.PASSED

			exceptionFormat TestExceptionFormat.FULL
		}
		info.events = debug.events
		info.exceptionFormat = debug.exceptionFormat

		afterSuite { desc, result ->
			if (!desc.parent) {
				def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
				def startItem = '|  ', endItem = '  |'
				def repeatLength = startItem.length() + output.length() + endItem.length()
				println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
			}
		}
	}
}